/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.js
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/modals.js
var import_obsidian = require("obsidian");

// src/settings.js
var import_obsidian2 = require("obsidian");

function formatDate(date, format) {
  const d = new Date(date);
  const year = d.getFullYear();
  const month = d.getMonth();
  const day = d.getDate();
  const weekday = d.getDay();
  const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  const monthsShort = months.map((m) => m.slice(0, 3));
  const weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  const weekdaysShort = weekdays.map((w) => w.slice(0, 3));
  const pad = (num) => num.toString().padStart(2, "0");
  const tokens = {
    "dddd": weekdays[weekday],
    "ddd": weekdaysShort[weekday],
    "dd": pad(day),
    "d": day.toString(),
    "mmmm": months[month],
    "mmm": monthsShort[month],
    "mm": pad(month + 1),
    "m": (month + 1).toString(),
    "yyyy": year.toString(),
    "yy": year.toString().slice(-2)
  };
  const sortedTokens = Object.keys(tokens).sort((a, b) => b.length - a.length);
  let result = format.toLowerCase();
  const replacements = /* @__PURE__ */ new Map();
  sortedTokens.forEach((token, index) => {
    const placeholder = `__${index}__`;
    replacements.set(placeholder, tokens[token]);
    result = result.replace(new RegExp(token, "gi"), placeholder);
  });
  replacements.forEach((value, placeholder) => {
    result = result.replace(new RegExp(placeholder, "g"), value);
  });
  return result;
}

// src/settings.js
var DEFAULT_SETTINGS = {
  customCreatedDateProp: "",
  customModifiedDateProp: "",
  dateDisplayFormat: "mmmm dd, yyyy",
  showBacklinks: true,
  showDates: true,
  updateDelay: 3000
};

var FootLinkerSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }

  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.addClass("footlinker-settings");
    containerEl.createEl("div", {
      cls: "footlinker-info",
      text: "ðŸ¦¶ FootLinker adds a footer to your notes with useful information such as backlinks, creation date, and last modified date. Use the settings below to customize the appearance."
    });
  }
};

// src/main.js
var FootLinkerPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();

    const updateFootLinkerCallback = async () => {
      try {
        await this.updateFootLinker();
      } catch (error) {
        console.error("Error in updateFootLinkerCallback:", error);
      }
    };

    this.debouncedUpdateFootLinker = (0, import_obsidian3.debounce)(updateFootLinkerCallback, this.settings.updateDelay, true);
    this.immediateUpdateFootLinker = updateFootLinkerCallback;

    this.addSettingTab(new FootLinkerSettingTab(this.app, this));

    this.registerEventHandlers();
    this.app.workspace.onLayoutReady(() => this.immediateUpdateFootLinker());
  }

  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    if (!Array.isArray(this.settings.excludedFolders)) {
      this.settings.excludedFolders = [];
    }
  }

  async saveSettings() {
    await this.saveData(this.settings);
  }

  registerEventHandlers() {
    this.registerEvent(
      this.app.metadataCache.on("changed", (file) => {
        const cache = this.app.metadataCache.getFileCache(file);
        if (cache?.frontmatter) {
          const { customCreatedDateProp, customModifiedDateProp } = this.settings;
          if (customCreatedDateProp in cache.frontmatter || customModifiedDateProp in cache.frontmatter) {
            this.isEditMode() ? this.debouncedUpdateFootLinker() : this.immediateUpdateFootLinker();
          }
        }
      })
    );

    this.registerEvent(
      this.app.workspace.on("layout-change", async () => this.immediateUpdateFootLinker())
    );

    this.registerEvent(
      this.app.workspace.on("active-leaf-change", async () => {
        this.isEditMode() ? this.debouncedUpdateFootLinker() : this.immediateUpdateFootLinker();
      })
    );

    this.registerEvent(
      this.app.workspace.on("file-open", async () => this.immediateUpdateFootLinker())
    );

    this.registerEvent(
      this.app.workspace.on("mode-change", async () => this.immediateUpdateFootLinker())
    );

    this.registerEvent(
      this.app.workspace.on("editor-change", async () => this.debouncedUpdateFootLinker())
    );
  }

  async updateFootLinker() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (activeLeaf?.view instanceof import_obsidian3.MarkdownView) {
      await this.addFootLinker(activeLeaf.view);
    }
  }

  async addFootLinker(view) {
    try {
      const file = view.file;
      if (!file) {
        this.removeExistingFootLinker(view.contentEl);
        return;
      }

      const container = this.getContainer(view);
      if (!container || this.isExcludedBySelector(container)) {
        this.removeExistingFootLinker(view.contentEl);
        return;
      }

      this.removeExistingFootLinker(view.contentEl);
      this.disconnectObservers();

      const FootLinker = await this.createFootLinker(file);
      container.appendChild(FootLinker);
      this.observeContainer(container);
    } catch (error) {
      console.error("Error in addFootLinker:", error);
    }
  }

  getContainer(view) {
    const content = view.contentEl;
    if (this.isPreviewMode(view)) {
      return Array.from(content.querySelectorAll(".markdown-preview-section")).find(
        (section) => !section.closest(".internal-embed")
      );
    } else if (this.isEditMode(view)) {
      return content.querySelector(".cm-sizer");
    }
    return null;
  }

  isPreviewMode(view) {
    return view.getMode?.() === "preview" || view.mode === "preview";
  }

  isEditMode(view) {
    const activeView = view || this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    return activeView?.getMode?.() === "source" || activeView?.mode === "source";
  }

  isExcludedBySelector(container) {
    return this.settings.excludedParentSelectors?.some((selector) => {
      try {
        return container.matches(selector) || container.querySelector(selector);
      } catch (e) {
        console.error(`Invalid selector in settings: ${selector}`);
        return false;
      }
    });
  }

  removeExistingFootLinker(container) {
    container.querySelectorAll(".footlinker").forEach((el) => el.remove());
  }

  disconnectObservers() {
    this.contentObserver?.disconnect();
    this.containerObserver?.disconnect();
  }

  observeContainer(container) {
    this.containerObserver = new MutationObserver(async () => {
      if (!container.querySelector(".footlinker")) {
        const view = this.app.workspace.activeLeaf?.view;
        if (view instanceof import_obsidian3.MarkdownView) {
          await this.addFootLinker(view);
        }
      }
    });
    this.containerObserver.observe(container, { childList: true, subtree: true });
  }

  async createFootLinker(file) {
    const FootLinker = createDiv({ cls: "footlinker footlinker--hidden" });
    FootLinker.createDiv({ cls: "footlinker--dashed-line" });

    if (this.settings.showBacklinks) {
      this.addBacklinks(FootLinker, file);
    }

    if (this.settings.showDates) {
      this.addDates(FootLinker, file);
    }

    setTimeout(() => FootLinker.removeClass("footlinker--hidden"), 10);
    return FootLinker;
  }

  addBacklinks(FootLinker, file) {
    const backlinksData = this.app.metadataCache.getBacklinksForFile(file);
    if (!backlinksData?.data?.size) return;

    const backlinksDiv = FootLinker.createDiv({ cls: "footlinker--backlinks" });
    const backlinksUl = backlinksDiv.createEl("ul");

    Array.from(backlinksData.data.keys())
      .filter((linkPath) => linkPath.endsWith(".md"))
      .sort((a, b) => a.localeCompare(b))
      .forEach((linkPath) => {
        const li = backlinksUl.createEl("li");
        const link = li.createEl("a", {
          href: linkPath,
          text: linkPath.split("/").pop().slice(0, -3),
          cls: this.isEditMode() ? "cm-hmd-internal-link cm-underline" : "internal-link",
        });
        link.dataset.href = linkPath;
        link.dataset.sourcePath = file.path;
        this.setupLinkBehavior(link, linkPath, file);
      });

    if (!backlinksUl.childElementCount) backlinksDiv.remove();
  }

  addDates(FootLinker, file) {
    const datesWrapper = FootLinker.createDiv({ cls: "footlinker--dates-wrapper" });
    const cache = this.app.metadataCache.getFileCache(file);
    const frontmatter = cache?.frontmatter;

    const modifiedDate = this.getFormattedDate(
      frontmatter?.[this.settings.customModifiedDateProp],
      file.stat.mtime
    );
    datesWrapper.createDiv({ cls: "footlinker--modified-date", text: modifiedDate });

    const createdDate = this.getFormattedDate(
      frontmatter?.[this.settings.customCreatedDateProp],
      file.stat.ctime
    );
    datesWrapper.createDiv({ cls: "footlinker--created-date", text: createdDate });
  }

  getFormattedDate(customDate, fallbackDate) {
    if (customDate && !isNaN(Date.parse(customDate))) {
      return formatDate(new Date(customDate), this.settings.dateDisplayFormat);
    }
    return formatDate(new Date(fallbackDate), this.settings.dateDisplayFormat);
  }

  setupLinkBehavior(link, linkPath, file) {
    link.addEventListener("click", (event) => {
      event.preventDefault();
      this.app.workspace.openLinkText(linkPath, file.path);
    });
  }

  onunload() {
    this.disconnectObservers();
    document.querySelectorAll(".footlinker").forEach((el) => el.remove());
  }
};
var main_default = FootLinkerPlugin;
/* nosourcemap */